define(["require","common/platform/AudioPlayer","platform/worker/api/audio/AudioInfo","platform/worker/AudioFocus","common/lib/Promise","common/PlatformConfig"],function(require){"use strict";var AudioPlayer=require("common/platform/AudioPlayer"),AudioInfo=require("platform/worker/api/audio/AudioInfo"),AudioFocus=require("platform/worker/AudioFocus"),Promise=require("common/lib/Promise"),PlatformConfig=require("common/PlatformConfig"),MediaPlay,initPromise,audioInfo,activeSessionId,sessions={},statusPromise,statusMatch,capabilities,playPromise,pausePromise,stopPromise,resumePromise,seekPromise,noLatch,PLAY_TIMEOUT=1e4,PAUSE_TIMEOUT=2e3,STOP_TIMEOUT=2e3,SEEK_TIMEOUT=2e3,statusPromiseTimer;function createStatusPromise(match,timeout,reject){statusPromise&&!statusPromise.isResolved()&&!statusPromise.isRejected()&&statusPromise.reject(AudioPlayer.Error.INTERRUPTED_PROMISE),statusMatch=match,statusPromise=new Promise,clearTimeout(statusPromiseTimer),statusPromiseTimer=setTimeout(function(){!statusPromise.isResolved()&&!statusPromise.isRejected()&&(reject?statusPromise.reject(AudioPlayer.Error.MEDIA_PLAYER_ERROR):AudioManager.onStatusUpdate({status:match}))},timeout)}function rejectMediaError(promise){var p=new Promise(0);return promise.then(function(x){x&&x.data&&x.data===MediaPlay.Status.ERROR?(p.reject(x.data),statusPromise.reject(x.data)):p.resolve(x&&x.data)},function(y){p.reject(y&&y.data)}),p}function defaultErrText(errCode){switch(errCode){case AudioPlayer.Error.SUCCESS:return"";case AudioPlayer.Error.INTEGRATION_ERROR:return"Unexpected error from host interface";case AudioPlayer.Error.INTERRUPTED_PROMISE:return"Action attempted before prior action was complete";case AudioPlayer.Error.INVALID_SEEK_POSITION:return"Seek position given is not reachable";case AudioPlayer.Error.INVALID_STATE:return"Unable to achieve the desired player state from the current one";case AudioPlayer.Error.MEDIA_PLAYER_ERROR:return"Unexpected error from host player";case AudioPlayer.Error.NOT_FOUND:return"Resource not found";case AudioPlayer.Error.OPERATION_NOT_SUPPORTED:return"The desired operation is not supported in this implementation";case AudioPlayer.Error.STREAM_FORMAT_ERROR:return"The format of the media stream is invalid or unsupported";default:return"Unexpected error code ("+errCode+")"}}function recordError(moduleId,errCode,errText){var session=sessions[moduleId];session&&(!errCode&&errText&&(errCode=AudioPlayer.Error.AUDIO_MANAGER_ERROR),session.errCode=errCode,session.errText=errText||defaultErrText(errCode))}function mapMediaPlayErrorToPlayerError(eventInfo){if(typeof eventInfo!="object")return;MediaPlay.getError().done(function(errInfo){var mpErrCode=errInfo.errCode,mpErrText=errInfo.errText;switch(mpErrCode){case MediaPlay.Error.SUCCESS:break;case MediaPlay.Error.UNKNOWN_METHOD:case MediaPlay.Error.BAD_PARAMETER_COUNT:case MediaPlay.Error.MISSING_PARAMETER:case MediaPlay.Error.MESSAGE_SYNTAX:case MediaPlay.Error.PARAMETER_SYNTAX:recordError(activeSessionId,AudioPlayer.Error.INTEGRATION_ERROR);break;case MediaPlay.Error.RANGE_ERROR:case MediaPlay.Error.OPERATION_FAILED:recordError(activeSessionId,AudioPlayer.Error.MEDIA_PLAYER_ERROR,mpErrText);break;case MediaPlay.Error.RESOURCE_NOT_FOUND:recordError(activeSessionId,AudioPlayer.Error.NOT_FOUND);break;case MediaPlay.Error.UNDOCUMENTED_ERROR:recordError(activeSessionId,AudioPlayer.Error.MEDIA_PLAYER_ERROR,mpErrText);break;case MediaPlay.Error.OPERATION_NOT_SUPPORTED:recordError(activeSessionId,AudioPlayer.Error.OPERATION_NOT_SUPPORTED,mpErrText);break;case MediaPlay.Error.STREAM_FORMAT_ERROR:recordError(activeSessionId,AudioPlayer.Error.STREAM_FORMAT_ERROR,mpErrText);break;case MediaPlay.Error.BAD_MEDIA_FORMAT:recordError(activeSessionId,AudioPlayer.Error.STREAM_FORMAT_ERROR,mpErrText);break;case MediaPlay.Error.BAD_STREAM_PROTOCOL:recordError(activeSessionId,AudioPlayer.Error.STREAM_FORMAT_ERROR,mpErrText);break;case MediaPlay.Error.ACCESS_ERROR:recordError(activeSessionId,AudioPlayer.Error.NOT_FOUND,mpErrText);break;case MediaPlay.Error.STREAMING_ERROR:recordError(activeSessionId,AudioPlayer.Error.MEDIA_PLAYER_ERROR,mpErrText);break;case MediaPlay.Error.TEMPORARILY_UNAVAILABLE:recordError(activeSessionId,AudioPlayer.Error.MEDIA_PLAYER_ERROR,mpErrText);break;case MediaPlay.Error.INVALID_STATE:recordError(activeSessionId,AudioPlayer.Error.INVALID_STATE,mpErrText)}})}function switchSession(newSessionId){if(activeSessionId===newSessionId)return Promise.wrap();var switchPromise=new Promise;activeSessionId&&sessions[activeSessionId].status===AudioPlayer.Status.PLAYING&&(sessions[activeSessionId].status=AudioPlayer.Status.PAUSED),AudioManager.publish(AudioPlayer.NotificationEvent.SessionSwitch,newSessionId),activeSessionId=newSessionId,audioInfo.registerAudioApp(activeSessionId),audioInfo.setLastAudioApp(activeSessionId);function fail(err){switchPromise.reject(err)}var sessionInfo=sessions[activeSessionId];if(sessionInfo.status===AudioPlayer.Status.STOPPED||sessionInfo.status===AudioPlayer.Status.ERROR)return switchPromise.resolve(sessionInfo.status),switchPromise;var couchedTrack=sessionInfo.trackLocation;return MediaPlay.stop().then(function(resp){MediaPlay.clearQueue().then(function(resp){var all=[];for(var i=0;i<sessionInfo.playlist.length;i++){var url=sessionInfo.playlist[i];all.push(MediaPlay.queueTrack(url))}Promise.whenAll(all).then(function(resp){sessions[activeSessionId].trackLocation=couchedTrack,sessionInfo.isPausedForFocus?(Log.debug("SS resume for focus",sessions[activeSessionId]),noLatch=!0,AudioManager.resume(activeSessionId).then(function(resp){Log.debug("SS resume success ",resp),switchPromise.resolve(resp)},fail)):switchPromise.resolve(resp)},fail)},fail)},fail),switchPromise}function publishEvent(event,info){AudioManager.publish(AudioPlayer.NotificationEvent.MediaEvent,event,info)}function clearAudioInfo(){audioInfo.setCurrentTrackInfo(" "," ")}function handleFocusEvent(moduleId,granted){if(moduleId!==activeSessionId)return;var sessionInfo=sessions[moduleId];granted?sessionInfo.isPausedForFocus&&sessionInfo.isPausedForFocus&&(sessionInfo.isPausedForFocus=!1,noLatch=!0,AudioManager.resume(moduleId).then(function(a){},function(b){Log.error("*** Focus Resume failure ***",b)})):sessionInfo.status!==AudioPlayer.Status.PAUSED&&(sessionInfo.isPausedForFocus=!0,noLatch=!0,AudioManager.pause(moduleId).then(function(a){},function(b){noLatch=!0,AudioManager.stop(moduleId)}))}var AudioManager={SessionInfo:function(){this.status=AudioPlayer.Status.STOPPED,this.errCode=AudioPlayer.Status.SUCCESS,this.errText="",this.isPausedForFocus=undefined,this.playlist=[],this.trackLocation="",this.position=0,this.duration=undefined},Capabilities:function(){var caps=PlatformConfig.AudioSupport||{};this.interfaceVersion=caps.interfaceVersion||"2,0.0",this.audioFormats=caps.audioFormats||[],this.isSeekSupported=caps.isSeekSupported||!1,Object.freeze(this)},init:function(){initPromise=new Promise;var promise2=new Promise,timeUpdateInterval=1,enablePositionUpdate=!1,enableStatusUpdate=!0,enableTrackChange=!0,enableMetadataChange=!0;function initMediaPlay(){var mp=PlatformConfig.useAudioTagMedia?"platform/worker/api/ATMediaPlay":"platform/worker/api/MediaPlay";require([mp],function(mpsvc){MediaPlay=mpsvc,MediaPlay.init(eventCallback).then(function(){MediaPlay.setNotificationOptions(timeUpdateInterval,enablePositionUpdate,enableStatusUpdate,enableTrackChange,enableMetadataChange).then(carryOn,failInit)},failInit)},failInit)}function failInit(err){initPromise.reject(err)}function carryOn(){promise2.then(function(){audioInfo=new AudioInfo(AudioManager),initPromise.resolve(AudioPlayer.Error.SUCCESS),capabilities=new AudioManager.Capabilities},function(err){initPromise.reject(err)})}initMediaPlay(),promise2.resolve(),require(["platform/worker/ServiceManager"],function(ServiceManager){ServiceManager.mixin(AudioManager,{serviceName:"AudioManager"}),promise2.resolve(AudioPlayer.Error.SUCCESS)},function(err){promise2.reject(err)})},registerPlayer:function(moduleId){var us=this,promise=new Promise;return initPromise||AudioManager.init(),sessions[moduleId]&&this.onApplicationStateChange(moduleId,"stopped"),initPromise.then(function(){var app=us.managerModules[moduleId],type=app.defaultType;app.connection.addPermission("background-exec");if(type!=="always"&&type!=="whenActive")promise.reject("INVALID PERMISSIONS ("+type+")-- Please see app.manifest");else{var sessionInfo=new AudioManager.SessionInfo;sessions[moduleId]=sessionInfo,promise.resolve({capabilities:capabilities,sessionId:moduleId})}},function(err){err&&Log.error("AudioManager.registerPlayer error: "+err),promise.reject(err)}),promise}.requires("moduleId"),onApplicationStateChange:function(moduleId,state){if(moduleId!==activeSessionId)return;var app=this.managerModules[activeSessionId],type=app.defaultType;type==="whenActive"&&state==="paused"&&(noLatch=!0,AudioManager.pause(activeSessionId).fail(function(){noLatch=!0,AudioManager.stop(activeSessionId)}),AudioFocus.hasAudio("MEDIA")&&AudioFocus.relinquishAudio("MEDIA",activeSessionId)),state==="stopped"&&(clearAudioInfo(),MediaPlay.stop(),AudioFocus.hasAudio("MEDIA")&&AudioFocus.relinquishAudio("MEDIA",activeSessionId),AudioManager.publish(AudioPlayer.NotificationEvent.SessionSwitch,undefined),delete sessions[activeSessionId])},play:function(moduleId,trackLocation){pausePromise&&!pausePromise.isResolved()&&!pausePromise.isRejected()&&(noLatch||pausePromise.reject(AudioPlayer.Error.INTERRUPTED_PROMISE)),stopPromise&&!stopPromise.isResolved()&&!stopPromise.isRejected()&&(noLatch||stopPromise.resolve(AudioPlayer.Status.STOPPED)),playPromise&&!playPromise.isResolved()&&!playPromise.isRejected()&&(noLatch||playPromise.reject(AudioPlayer.Error.INTERRUPTED_PROMISE)),noLatch=!1,playPromise=new Promise(3e4);var firstPromise=new Promise,sessionInfo;return moduleId!==activeSessionId?(activeSessionId&&(sessionInfo=sessions[activeSessionId]),sessionInfo&&sessionInfo.status===AudioPlayer.Status.PLAYING?(noLatch=!0,AudioManager.pause(activeSessionId).then(function(status){trackLocation||(trackLocation=sessions[moduleId].trackLocation),firstPromise.resolve()},function(err){recordError(activeSessionId,err,"Failed on pause for new session play"),firstPromise.resolve()})):firstPromise.resolve()):firstPromise.resolve(),firstPromise.always(function(){switchSession(moduleId).then(function(resp){sessionInfo=sessions[moduleId],sessionInfo.trackLocation=trackLocation,recordError(moduleId,AudioPlayer.Error.SUCCESS),stopThenPlay().then(requestFocus,function(err){playPromise.reject(err)}).then(onFocusGranted,onFocusRejected);function stopThenPlay(){var fp=new Promise;return typeof trackLocation!="undefined"?(noLatch=!0,AudioManager.stop(activeSessionId).then(function(resp){return MediaPlay.clearQueue()},function(err){return Log.error("AudioManager.play: failed to _stop"),recordError(activeSessionId,err,"Failed to stop prior to new play"),fp.reject(err),fp}).then(function(resp){return trackLocation?MediaPlay.queueTrack(trackLocation):Promise.wrap()},function(err){return Log.error("AudioManager.play: failed to clearQueue"),recordError(activeSessionId,err,"Failed to clear queue"),fp.reject(err),fp}).then(function(resp){return fp.resolve(resp),fp},function(err){return recordError(activeSessionId,err),fp.reject(err),fp})):fp.resolve(),fp}function requestFocus(){var rf=new Promise(0);function focb(torf){handleFocusEvent(moduleId,torf),torf===!1?rf.reject():rf.resolve()}return AudioFocus.hasAudio("MEDIA",activeSessionId)?rf.resolve():AudioFocus.requestAudio("MEDIA",activeSessionId,focb).always(focb),rf}function onFocusGranted(){createStatusPromise(AudioPlayer.Status.PLAYING,PLAY_TIMEOUT,!0),Promise.whenAll(rejectMediaError(MediaPlay.play()),statusPromise).then(function(status){playPromise.resolve(AudioPlayer.Status.PLAYING)},function(err){recordError(activeSessionId,err,"Failed to play"),playPromise.reject(err)})}function onFocusRejected(){sessionInfo.isPausedForFocus=!0,playPromise.resolve(AudioPlayer.Status.STOPPED)}},function(err){playPromise.reject(err)})}),playPromise}.requires("moduleId"),pause:function(moduleId){if(resumePromise&&!resumePromise.isResolved()&&!resumePromise.isRejected()&&!noLatch)return pausePromise=pausePromise||new Promise,pausePromise.reject(AudioPlayer.Error.INTERRUPTED_PROMISE),pausePromise;if(stopPromise&&!stopPromise.isResolved()&&!stopPromise.isRejected()&&!noLatch)return pausePromise=pausePromise||new Promise,pausePromise.reject(AudioPlayer.Error.INVALID_STATE),pausePromise;if(playPromise&&!playPromise.isResolved()&&!playPromise.isRejected()&&!noLatch)return pausePromise=pausePromise||new Promise,pausePromise.reject(AudioPlayer.Error.INTERRUPTED_PROMISE),pausePromise;if(pausePromise&&!pausePromise.isResolved()&&!pausePromise.isRejected())return pausePromise;noLatch=!1,pausePromise=new Promise;var sessionInfo=sessions[moduleId],status=sessionInfo&&sessionInfo.status;return moduleId!==activeSessionId?status===AudioPlayer.Status.PAUSED?pausePromise.resolve(status):(recordError(moduleId,AudioPlayer.Error.INVALID_STATE,"Not the active audio session"),pausePromise.reject(AudioPlayer.Error.INVALID_STATE)):status===AudioPlayer.Status.STOPPED||status===AudioPlayer.Status.ERROR?(recordError(moduleId,AudioPlayer.Error.INVALID_STATE),pausePromise.reject(AudioPlayer.Error.INVALID_STATE)):(createStatusPromise(AudioPlayer.Status.PAUSED,PAUSE_TIMEOUT,status!==AudioPlayer.Status.PAUSED),Promise.whenAll(rejectMediaError(MediaPlay.pause()),statusPromise).then(function(resp){pausePromise.resolve(AudioPlayer.Status.PAUSED)},function(err){var errCode=err&&err.errorCode||AudioPlayer.Error.MEDIA_PLAYER_ERROR,errText=err&&err.errorText;recordError(moduleId,errCode,errText),pausePromise.reject(err)})),pausePromise}.requires("moduleId"),resume:function(moduleId){if(stopPromise&&!stopPromise.isResolved()&&!stopPromise.isRejected()&&!noLatch)return resumePromise=resumePromise||new Promise,resumePromise.reject(AudioPlayer.Error.INVALID_STATE),resumePromise;if(pausePromise&&!pausePromise.isResolved()&&!pausePromise.isRejected()&&!noLatch)return resumePromise=resumePromise||new Promise,resumePromise.reject(AudioPlayer.Error.INTERRUPTED_PROMISE),resumePromise;if(resumePromise&&!resumePromise.isResolved()&&!resumePromise.isRejected())return Log.warn("Already Resuming"),resumePromise;noLatch=!1,resumePromise=new Promise;var sessionInfo=sessions[moduleId],status=sessionInfo&&sessionInfo.status;return moduleId!==activeSessionId&&status===AudioPlayer.Status.PAUSED&&(status=AudioPlayer.Status.STOPPED),status===AudioPlayer.Status.PAUSED?(noLatch=!0,AudioManager.play(moduleId).then(function(resp){resumePromise.resolve(resp)},function(err){sessionInfo.status=err,noLatch=!0,AudioManager.resume(moduleId).then(function(resp){resumePromise.resolve(resp)},function(err){resumePromise.reject(err)})})):status===AudioPlayer.Status.STOPPED||status===AudioPlayer.Status.ERROR?(sessionInfo.trackLocation&&(noLatch=!0,AudioManager.play(moduleId,sessionInfo.trackLocation).then(function(resp){var live=!sessionInfo.position||!sessionInfo.duration;live?resumePromise.resolve(resp):capabilities.isSeekSupported?MediaPlay.seek(sessionInfo.position).then(function(resp){resumePromise.resolve(resp)},function(err){MediaPlay.stop(),resumePromise.reject(err)}):resumePromise.reject(AudioPlayer.Error.OPERATION_NOT_SUPPORTED)},function(err){var errCode=err&&err.errorCode||AudioPlayer.Error.MEDIA_PLAYER_ERROR,errText=err&&err.errorText;recordError(moduleId,errCode,errText),resumePromise.reject(err)})),recordError(moduleId,AudioPlayer.Error.INVALID_STATE),resumePromise.reject(AudioPlayer.Error.INVALID_STATE)):(recordError(moduleId,AudioPlayer.Error.INVALID_STATE),resumePromise.reject(AudioPlayer.Error.INVALID_STATE)),resumePromise}.requires("moduleId"),stop:function(moduleId){var sessionInfo=sessions[moduleId];if(!sessionInfo)return Promise.wrap();resumePromise&&!resumePromise.isResolved()&&!resumePromise.isRejected()&&(noLatch||resumePromise.reject(AudioPlayer.Error.INTERRUPTED_PROMISE)),pausePromise&&!pausePromise.isResolved()&&!pausePromise.isRejected()&&(noLatch||pausePromise.reject(AudioPlayer.Error.INTERRUPTED_PROMISE));if(stopPromise&&!stopPromise.isResolved()&&!stopPromise.isRejected())return stopPromise;noLatch=!1,stopPromise=new Promise;var status=sessionInfo.status;return moduleId!==activeSessionId?status===AudioPlayer.Status.STOPPED||status===AudioPlayer.Status.ERROR?stopPromise.resolve(status):(recordError(moduleId,AudioPlayer.Error.INVALID_STATE,"Not the active audio session"),stopPromise.reject(status)):(status===AudioPlayer.Status.PLAYING||status===AudioPlayer.Status.PAUSED?createStatusPromise(AudioPlayer.Status.STOPPED,STOP_TIMEOUT,!1):statusPromise=Promise.wrap(),Promise.whenAll(rejectMediaError(MediaPlay.stop()),statusPromise).then(function(resp){stopPromise.resolve(AudioPlayer.Status.STOPPED)},function(err){var errCode=err&&err.errorCode||AudioPlayer.Error.MEDIA_PLAYER_ERROR,errText=err&&err.errorText;recordError(moduleId,errCode,errText),stopPromise.reject(err)})),stopPromise}.requires("moduleId"),seek:function(moduleId,position){var sessionInfo=sessions[moduleId];if(!sessionInfo)return Promise.wrap();resumePromise&&!resumePromise.isResolved()&&!resumePromise.isRejected()&&resumePromise.reject(AudioPlayer.Error.INTERRUPTED_PROMISE),playPromise&&!playPromise.isResolved()&&!playPromise.isRejected()&&playPromise.reject(AudioPlayer.Error.INTERRUPTED_PROMISE),pausePromise&&!pausePromise.isResolved()&&!pausePromise.isRejected()&&pausePromise.reject(AudioPlayer.Error.INTERRUPTED_PROMISE);if(seekPromise&&!seekPromise.isResolved()&&!seekPromise.isRejected())return seekPromise;seekPromise=new Promise;var status=sessionInfo.status;return capabilities.isSeekSupported?moduleId!==activeSessionId?(recordError(moduleId,AudioPlayer.Error.INVALID_STATE,"Not the active audio session"),seekPromise.reject(status)):(createStatusPromise(AudioPlayer.Status.PLAYING,SEEK_TIMEOUT,!0),Promise.whenAll(rejectMediaError(MediaPlay.seek(position)),statusPromise).then(function(resp){seekPromise.resolve(AudioPlayer.Status.PLAYING)},function(err){var errCode=err&&err.errorCode||AudioPlayer.Error.MEDIA_PLAYER_ERROR,errText=err&&err.errorText;recordError(moduleId,errCode,errText),seekPromise.reject(err)})):(recordError(moduleId,AudioPlayer.Error.OPERATION_NOT_SUPPORTED,"Seek not supported by this implementation"),seekPromise.reject(AudioPlayer.Error.OPERATION_NOT_SUPPORTED)),seekPromise}.requires("moduleId"),getStatus:function(moduleId){var sessionInfo=sessions[moduleId],status=sessionInfo&&sessionInfo.status;return status}.requires("moduleId"),getError:function(moduleId){var sessionInfo=sessions[moduleId];return sessionInfo?Promise.wrap({errCode:sessionInfo.errCode,errText:sessionInfo.errText}):Promise.wrap({errCode:AudioPlayer.Error.INVALID_STATE,errText:"No registered session for this player"})}.requires("moduleId"),setCurrentPlayingInfo:function(audioMetadataProperties){audioInfo.setCurrentTrackInfo(audioMetadataProperties.artist,audioMetadataProperties.title)},onStatusUpdate:function(eventInfo){var sessionInfo=sessions[activeSessionId];if(!sessionInfo)return;var previousStatus=sessionInfo.status;sessionInfo.status=eventInfo.status,typeof eventInfo.position!="undefined"&&(sessionInfo.position=eventInfo.position),typeof eventInfo.duration!="undefined"&&(sessionInfo.duration=eventInfo.duration);var status=eventInfo.status;switch(eventInfo.status){case MediaPlay.Status.ERROR:case MediaPlay.Status.STOPPED:case MediaPlay.Status.UNKNOWN:previousStatus===AudioPlayer.Status.PLAYING&&clearAudioInfo(),sessionInfo.playlist=[],sessionInfo.isPausedForFocus=!1,sessionInfo.trackLocation=undefined,sessionInfo.metadata=undefined,eventInfo.status===MediaPlay.Status.ERROR?(status=AudioPlayer.Status.ERROR,mapMediaPlayErrorToPlayerError(eventInfo),eventInfo.trackLocation&&eventInfo.trackLocation!==sessionInfo.trackLocation&&(sessionInfo.trackLocation=eventInfo.trackLocation)):(sessionInfo.errorCode=AudioPlayer.Error.SUCCESS,status=AudioPlayer.Status.STOPPED);break;case MediaPlay.Status.PLAYING:status=AudioPlayer.Status.PLAYING,MediaPlay.getQueue().done(function(queueResp){Array.isArray(queueResp.data)&&(sessionInfo.playlist=[],sessionInfo.playlist.push(queueResp.data[0]))}).fail(function(error){AudioManager.onStatusUpdate({status:MediaPlay.Status.ERROR,errCode:error,errText:"Failed to capture playing queue"})});break;case MediaPlay.Status.BUFFERING:case MediaPlay.Status.SEEKING:case MediaPlay.Status.TRANSITIONING:case MediaPlay.Status.OTHER:status=AudioPlayer.Status.PLAYING}statusPromise&&!statusPromise.isResolved()&&!statusPromise.isRejected()&&(status===statusMatch&&statusPromise.resolve(status),status===AudioPlayer.Status.ERROR&&statusPromise.reject(status)),eventInfo.previousStatus!==previousStatus&&(Log.warn("Xeno reports different previous status of "+eventInfo.previousStatus+" vs. "+previousStatus),statusMatch===MediaPlay.Status.STOPPED&&statusInfo.status===MediaPlay.Status.PAUSED&&!statusInfo.previousStatus&&(statusInfo.status=MediaPlay.Status.STOPPED));var statusInfo={trackLocation:sessionInfo.trackLocation,status:sessionInfo.status,previousStatus:previousStatus};sessionInfo.duration&&(statusInfo.duration=sessionInfo.duration,statusInfo.position=sessionInfo.position),publishEvent(AudioPlayer.Event.STATUS,statusInfo)},onTrackUpdate:function(eventInfo){var sessionInfo=sessions[activeSessionId];sessionInfo&&eventInfo.trackLocation&&(sessionInfo.trackLocation=eventInfo.trackLocation,sessionInfo.errCode=AudioPlayer.Error.SUCCESS,sessionInfo.errText="",publishEvent(AudioPlayer.Event.TRACK,eventInfo.trackLocation))},onMetadataUpdate:function(eventInfo){var sessionInfo=sessions[activeSessionId];if(sessionInfo){var mdInfo={trackLocation:sessionInfo.trackLocation,metadataInfo:eventInfo.metadataInfo};delete mdInfo.metadataInfo.eventName,publishEvent(AudioPlayer.Event.METADATA,mdInfo)}},onPositionUpdate:function(eventInfo){var sessionInfo=sessions[activeSessionId];sessionInfo&&(typeof eventInfo.position!="undefined"&&(sessionInfo.position=eventInfo.position),typeof eventInfo.duration!="undefined"&&(sessionInfo.position=eventInfo.duration),publishEvent(AudioPlayer.Event.POSITION,eventInfo.position))},eventCallback:eventCallback};function eventCallback(event){var evName=event.eventName;switch(evName){case"StatusUpdate":AudioManager.onStatusUpdate(event);break;case"TrackChange":AudioManager.onTrackUpdate(event);break;case"PositionUpdate":AudioManager.onPositionUpdate(event);break;case"MetadataChange":AudioManager.onMetadataUpdate(event)}}return AudioManager});